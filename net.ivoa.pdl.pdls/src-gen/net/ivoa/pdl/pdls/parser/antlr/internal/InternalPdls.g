/*
* generated by Xtext
*/
grammar InternalPdls;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.ivoa.pdl.pdls.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.ivoa.pdl.pdls.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.ivoa.pdl.pdls.services.PdlsGrammarAccess;

}

@parser::members {

 	private PdlsGrammarAccess grammarAccess;
 	
    public InternalPdlsParser(TokenStream input, PdlsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PDL";	
   	}
   	
   	@Override
   	protected PdlsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePDL
entryRulePDL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPDLRule()); }
	 iv_rulePDL=rulePDL 
	 { $current=$iv_rulePDL.current; } 
	 EOF 
;

// Rule PDL
rulePDL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPDLAccess().getServiceParserRuleCall()); 
    }
    this_Service_0=ruleService
    { 
        $current = $this_Service_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='service' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='parameters' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getServiceAccess().getParametersKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getParametersParameterParserRuleCall_5_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_7='input' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getInputKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getInputsParameterGroupParserRuleCall_9_0()); 
	    }
		lv_inputs_9_0=ruleParameterGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_9_0, 
        		"ParameterGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_10());
    }
	otherlv_11='output' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getOutputKeyword_11());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getOutputsParameterGroupParserRuleCall_13_0()); 
	    }
		lv_outputs_13_0=ruleParameterGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_13_0, 
        		"ParameterGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_14());
    }
	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_15());
    }
)
;





// Entry rule entryRuleParameterID
entryRuleParameterID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterIDRule()); } 
	 iv_ruleParameterID=ruleParameterID 
	 { $current=$iv_ruleParameterID.current.getText(); }  
	 EOF 
;

// Rule ParameterID
ruleParameterID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getParameterIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameParameterIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleParameterID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ParameterID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeParameterTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleParameterType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ParameterType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleParameterGroup
entryRuleParameterGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterGroupRule()); }
	 iv_ruleParameterGroup=ruleParameterGroup 
	 { $current=$iv_ruleParameterGroup.current; } 
	 EOF 
;

// Rule ParameterGroup
ruleParameterGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='group' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterGroupAccess().getGroupKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterGroupAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterGroupAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='params' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterGroupAccess().getParamsKeyword_3_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterGroupAccess().getEqualsSignKeyword_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterGroupRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParameterGroupAccess().getParamsParameterCrossReference_3_2_0()); 
	    }
		ruleParameterID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getParameterGroupAccess().getCommaKeyword_3_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterGroupRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParameterGroupAccess().getParamsParameterCrossReference_3_3_1_0()); 
	    }
		ruleParameterID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)*(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterGroupAccess().getConstraintConstraintOnGroupParserRuleCall_4_0()); 
	    }
		lv_constraint_8_0=ruleConstraintOnGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterGroupRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_8_0, 
        		"ConstraintOnGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_9='active' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getParameterGroupAccess().getActiveKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterGroupAccess().getActiveWhenConditionalStatementParserRuleCall_5_1_0()); 
	    }
		lv_active_10_0=ruleWhenConditionalStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterGroupRule());
	        }
       		set(
       			$current, 
       			"active",
        		lv_active_10_0, 
        		"WhenConditionalStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getParameterGroupAccess().getSemicolonKeyword_5_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterGroupAccess().getGroupsParameterGroupParserRuleCall_6_0()); 
	    }
		lv_groups_12_0=ruleParameterGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterGroupRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_12_0, 
        		"ParameterGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getParameterGroupAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleConstraintOnGroup
entryRuleConstraintOnGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintOnGroupRule()); }
	 iv_ruleConstraintOnGroup=ruleConstraintOnGroup 
	 { $current=$iv_ruleConstraintOnGroup.current; } 
	 EOF 
;

// Rule ConstraintOnGroup
ruleConstraintOnGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraints ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraintOnGroupAccess().getConstraintsKeyword_0());
    }
(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintOnGroupAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintOnGroupAccess().getStatementsConditionalStatementParserRuleCall_1_1_0()); 
	    }
		lv_statements_2_0=ruleConditionalStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintOnGroupRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"ConditionalStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintOnGroupAccess().getRightSquareBracketKeyword_1_2());
    }
)+)
;





// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalStatementRule()); }
	 iv_ruleConditionalStatement=ruleConditionalStatement 
	 { $current=$iv_ruleConditionalStatement.current; } 
	 EOF 
;

// Rule ConditionalStatement
ruleConditionalStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalStatementAccess().getAlwaysConditionalStatementParserRuleCall_0()); 
    }
    this_AlwaysConditionalStatement_0=ruleAlwaysConditionalStatement
    { 
        $current = $this_AlwaysConditionalStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionalStatementAccess().getIfThenConditionalStatementParserRuleCall_1()); 
    }
    this_IfThenConditionalStatement_1=ruleIfThenConditionalStatement
    { 
        $current = $this_IfThenConditionalStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getConditionalStatementAccess().getWhenConditionalStatementParserRuleCall_2_0()); 
    }
    this_WhenConditionalStatement_2=ruleWhenConditionalStatement
    { 
        $current = $this_WhenConditionalStatement_2.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_comment_3_0=RULE_STRING
		{
			newLeafNode(lv_comment_3_0, grammarAccess.getConditionalStatementAccess().getCommentSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_3_0, 
        		"STRING");
	    }

)
)?))
;





// Entry rule entryRuleWhenConditionalStatement
entryRuleWhenConditionalStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhenConditionalStatementRule()); }
	 iv_ruleWhenConditionalStatement=ruleWhenConditionalStatement 
	 { $current=$iv_ruleWhenConditionalStatement.current; } 
	 EOF 
;

// Rule WhenConditionalStatement
ruleWhenConditionalStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='when' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhenConditionalStatementAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhenConditionalStatementAccess().getCriterionConditionalClauseParserRuleCall_1_0()); 
	    }
		lv_criterion_1_0=ruleConditionalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhenConditionalStatementRule());
	        }
       		set(
       			$current, 
       			"criterion",
        		lv_criterion_1_0, 
        		"ConditionalClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfThenConditionalStatement
entryRuleIfThenConditionalStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenConditionalStatementRule()); }
	 iv_ruleIfThenConditionalStatement=ruleIfThenConditionalStatement 
	 { $current=$iv_ruleIfThenConditionalStatement.current; } 
	 EOF 
;

// Rule IfThenConditionalStatement
ruleIfThenConditionalStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfThenConditionalStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenConditionalStatementAccess().getCriterionConditionalClauseParserRuleCall_1_0()); 
	    }
		lv_criterion_1_0=ruleConditionalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenConditionalStatementRule());
	        }
       		set(
       			$current, 
       			"criterion",
        		lv_criterion_1_0, 
        		"ConditionalClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfThenConditionalStatementAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenConditionalStatementAccess().getClauseConditionalClauseParserRuleCall_3_0()); 
	    }
		lv_clause_3_0=ruleConditionalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenConditionalStatementRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_3_0, 
        		"ConditionalClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConditionalClause
entryRuleConditionalClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalClauseRule()); }
	 iv_ruleConditionalClause=ruleConditionalClause 
	 { $current=$iv_ruleConditionalClause.current; } 
	 EOF 
;

// Rule ConditionalClause
ruleConditionalClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalClauseAccess().getTerminalClauseParserRuleCall_0()); 
    }
    this_TerminalClause_0=ruleTerminalClause
    { 
        $current = $this_TerminalClause_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalClauseAccess().getCriterionLeftAction_1_0(),
            $current);
    }
)((
(
ruleLogicalConnector
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalClauseAccess().getConnLogicalConnectorEnumRuleCall_1_1_0()); 
	    }
		lv_conn_2_0=ruleLogicalConnector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalClauseRule());
	        }
       		set(
       			$current, 
       			"conn",
        		lv_conn_2_0, 
        		"LogicalConnector");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalClauseAccess().getRightTerminalClauseParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleTerminalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalClauseRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TerminalClause");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerminalClause
entryRuleTerminalClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalClauseRule()); }
	 iv_ruleTerminalClause=ruleTerminalClause 
	 { $current=$iv_ruleTerminalClause.current; } 
	 EOF 
;

// Rule TerminalClause
ruleTerminalClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalClauseAccess().getExprExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalClauseRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalClauseAccess().getCondConditionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalClauseRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAlwaysConditionalStatement
entryRuleAlwaysConditionalStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlwaysConditionalStatementRule()); }
	 iv_ruleAlwaysConditionalStatement=ruleAlwaysConditionalStatement 
	 { $current=$iv_ruleAlwaysConditionalStatement.current; } 
	 EOF 
;

// Rule AlwaysConditionalStatement
ruleAlwaysConditionalStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlwaysConditionalStatementAccess().getAssertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlwaysConditionalStatementAccess().getClauseConditionalClauseParserRuleCall_1_0()); 
	    }
		lv_clause_1_0=ruleConditionalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlwaysConditionalStatementRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_1_0, 
        		"ConditionalClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getIsNullParserRuleCall_0()); 
    }
    this_isNull_0=ruleisNull
    { 
        $current = $this_isNull_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getBelongsToSetParserRuleCall_1()); 
    }
    this_BelongsToSet_1=ruleBelongsToSet
    { 
        $current = $this_BelongsToSet_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getDefaultValueParserRuleCall_2()); 
    }
    this_defaultValue_2=ruledefaultValue
    { 
        $current = $this_defaultValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getIsIntegerParserRuleCall_3()); 
    }
    this_isInteger_3=ruleisInteger
    { 
        $current = $this_isInteger_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getIsRationalParserRuleCall_4()); 
    }
    this_isRational_4=ruleisRational
    { 
        $current = $this_isRational_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getIsRealParserRuleCall_5()); 
    }
    this_isReal_5=ruleisReal
    { 
        $current = $this_isReal_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getValueDifferentFromParserRuleCall_6()); 
    }
    this_ValueDifferentFrom_6=ruleValueDifferentFrom
    { 
        $current = $this_ValueDifferentFrom_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getValueInRangeParserRuleCall_7()); 
    }
    this_ValueInRange_7=ruleValueInRange
    { 
        $current = $this_ValueInRange_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getValueSmallerThanParserRuleCall_8()); 
    }
    this_ValueSmallerThan_8=ruleValueSmallerThan
    { 
        $current = $this_ValueSmallerThan_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getValueLargerThanParserRuleCall_9()); 
    }
    this_ValueLargerThan_9=ruleValueLargerThan
    { 
        $current = $this_ValueLargerThan_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValueLargerThan
entryRuleValueLargerThan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueLargerThanRule()); }
	 iv_ruleValueLargerThan=ruleValueLargerThan 
	 { $current=$iv_ruleValueLargerThan.current; } 
	 EOF 
;

// Rule ValueLargerThan
ruleValueLargerThan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueLargerThanAccess().getGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueLargerThanAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueLargerThanRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValueSmallerThan
entryRuleValueSmallerThan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueSmallerThanRule()); }
	 iv_ruleValueSmallerThan=ruleValueSmallerThan 
	 { $current=$iv_ruleValueSmallerThan.current; } 
	 EOF 
;

// Rule ValueSmallerThan
ruleValueSmallerThan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueSmallerThanAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueSmallerThanAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueSmallerThanRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValueInRange
entryRuleValueInRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueInRangeRule()); }
	 iv_ruleValueInRange=ruleValueInRange 
	 { $current=$iv_ruleValueInRange.current; } 
	 EOF 
;

// Rule ValueInRange
ruleValueInRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='in' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueInRangeAccess().getInKeyword_0());
    }
	otherlv_1='range' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueInRangeAccess().getRangeKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValueInRangeAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueInRangeAccess().getInfExpressionParserRuleCall_3_0()); 
	    }
		lv_inf_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueInRangeRule());
	        }
       		set(
       			$current, 
       			"inf",
        		lv_inf_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	'...' 
)=>	otherlv_4='...' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValueInRangeAccess().getFullStopFullStopFullStopKeyword_4());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueInRangeAccess().getSupExpressionParserRuleCall_5_0()); 
	    }
		lv_sup_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueInRangeRule());
	        }
       		set(
       			$current, 
       			"sup",
        		lv_sup_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getValueInRangeAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleValueDifferentFrom
entryRuleValueDifferentFrom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueDifferentFromRule()); }
	 iv_ruleValueDifferentFrom=ruleValueDifferentFrom 
	 { $current=$iv_ruleValueDifferentFrom.current; } 
	 EOF 
;

// Rule ValueDifferentFrom
ruleValueDifferentFrom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueDifferentFromAccess().getExclamationMarkEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueDifferentFromAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueDifferentFromRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleisReal
entryRuleisReal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsRealRule()); }
	 iv_ruleisReal=ruleisReal 
	 { $current=$iv_ruleisReal.current; } 
	 EOF 
;

// Rule isReal
ruleisReal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isReal_0_0=	'is' 
    {
        newLeafNode(lv_isReal_0_0, grammarAccess.getIsRealAccess().getIsRealIsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsRealRule());
	        }
       		setWithLastConsumed($current, "isReal", true, "is");
	    }

)
)	otherlv_1='real' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsRealAccess().getRealKeyword_1());
    }
)
;





// Entry rule entryRuleisRational
entryRuleisRational returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsRationalRule()); }
	 iv_ruleisRational=ruleisRational 
	 { $current=$iv_ruleisRational.current; } 
	 EOF 
;

// Rule isRational
ruleisRational returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isRational_0_0=	'is' 
    {
        newLeafNode(lv_isRational_0_0, grammarAccess.getIsRationalAccess().getIsRationalIsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsRationalRule());
	        }
       		setWithLastConsumed($current, "isRational", true, "is");
	    }

)
)	otherlv_1='rational' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsRationalAccess().getRationalKeyword_1());
    }
)
;





// Entry rule entryRuleisInteger
entryRuleisInteger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsIntegerRule()); }
	 iv_ruleisInteger=ruleisInteger 
	 { $current=$iv_ruleisInteger.current; } 
	 EOF 
;

// Rule isInteger
ruleisInteger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isInteger_0_0=	'is' 
    {
        newLeafNode(lv_isInteger_0_0, grammarAccess.getIsIntegerAccess().getIsIntegerIsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsIntegerRule());
	        }
       		setWithLastConsumed($current, "isInteger", true, "is");
	    }

)
)	otherlv_1='integer' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsIntegerAccess().getIntegerKeyword_1());
    }
)
;





// Entry rule entryRuledefaultValue
entryRuledefaultValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultValueRule()); }
	 iv_ruledefaultValue=ruledefaultValue 
	 { $current=$iv_ruledefaultValue.current; } 
	 EOF 
;

// Rule defaultValue
ruledefaultValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultValueAccess().getDefaultKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBelongsToSet
entryRuleBelongsToSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBelongsToSetRule()); }
	 iv_ruleBelongsToSet=ruleBelongsToSet 
	 { $current=$iv_ruleBelongsToSet.current; } 
	 EOF 
;

// Rule BelongsToSet
ruleBelongsToSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='in' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBelongsToSetAccess().getInKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBelongsToSetAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBelongsToSetAccess().getValuesExpressionParserRuleCall_2_0_0()); 
	    }
		lv_values_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBelongsToSetRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBelongsToSetAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBelongsToSetAccess().getValuesExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_values_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBelongsToSetRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBelongsToSetAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleisNull
entryRuleisNull returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsNullRule()); }
	 iv_ruleisNull=ruleisNull 
	 { $current=$iv_ruleisNull.current; } 
	 EOF 
;

// Rule isNull
ruleisNull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isNull_0_0=	'is' 
    {
        newLeafNode(lv_isNull_0_0, grammarAccess.getIsNullAccess().getIsNullIsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsNullRule());
	        }
       		setWithLastConsumed($current, "isNull", true, "is");
	    }

)
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsNullAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getNameFunctionTypeEnumRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleFunctionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FunctionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAtomicParameterExpression
entryRuleAtomicParameterExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicParameterExpressionRule()); }
	 iv_ruleAtomicParameterExpression=ruleAtomicParameterExpression 
	 { $current=$iv_ruleAtomicParameterExpression.current; } 
	 EOF 
;

// Rule AtomicParameterExpression
ruleAtomicParameterExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtomicParameterExpressionAccess().getDollarSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicParameterExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAtomicParameterExpressionAccess().getPrefParameterCrossReference_1_0()); 
	    }
		ruleParameterID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicParameterExpressionAccess().getCircumflexAccentKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicParameterExpressionAccess().getPowerExpressionParserRuleCall_2_1_0()); 
	    }
		lv_power_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicParameterExpressionRule());
	        }
       		set(
       			$current, 
       			"power",
        		lv_power_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAtomicConstantExpression
entryRuleAtomicConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicConstantExpressionRule()); }
	 iv_ruleAtomicConstantExpression=ruleAtomicConstantExpression 
	 { $current=$iv_ruleAtomicConstantExpression.current; } 
	 EOF 
;

// Rule AtomicConstantExpression
ruleAtomicConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicConstantExpressionAccess().getConstNumberParserRuleCall_0_0_0()); 
	    }
		lv_const_0_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicConstantExpressionRule());
	        }
       		set(
       			$current, 
       			"const",
        		lv_const_0_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomicConstantExpressionAccess().getCircumflexAccentKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicConstantExpressionAccess().getPowerExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_power_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicConstantExpressionRule());
	        }
       		set(
       			$current, 
       			"power",
        		lv_power_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
(
		lv_str_3_0=RULE_STRING
		{
			newLeafNode(lv_str_3_0, grammarAccess.getAtomicConstantExpressionAccess().getStrSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicConstantExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((	'+' 
 | 	'-' 
 | 	'*' 
 | 	'/' 
 | 	'.' 
)=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getOperationLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOpOperationTypeEnumRuleCall_1_0_1_0()); 
	    }
		lv_op_2_0=ruleOperationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperationType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightTerminalExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getParenthesisContentParserRuleCall_0()); 
    }
    this_ParenthesisContent_0=ruleParenthesisContent
    { 
        $current = $this_ParenthesisContent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getAtomicConstantExpressionParserRuleCall_1()); 
    }
    this_AtomicConstantExpression_1=ruleAtomicConstantExpression
    { 
        $current = $this_AtomicConstantExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getAtomicParameterExpressionParserRuleCall_2()); 
    }
    this_AtomicParameterExpression_2=ruleAtomicParameterExpression
    { 
        $current = $this_AtomicParameterExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getFunctionParserRuleCall_3()); 
    }
    this_Function_3=ruleFunction
    { 
        $current = $this_Function_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesisContent
entryRuleParenthesisContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisContentRule()); }
	 iv_ruleParenthesisContent=ruleParenthesisContent 
	 { $current=$iv_ruleParenthesisContent.current; } 
	 EOF 
;

// Rule ParenthesisContent
ruleParenthesisContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisContentAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisContentAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisContentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesisContentAccess().getRightParenthesisKeyword_2());
    }
(	otherlv_3='^' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParenthesisContentAccess().getCircumflexAccentKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisContentAccess().getPowerExpressionParserRuleCall_3_1_0()); 
	    }
		lv_power_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisContentRule());
	        }
       		set(
       			$current, 
       			"power",
        		lv_power_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getINTEGERParserRuleCall_0()); 
    }
    this_INTEGER_0=ruleINTEGER    {
		$current.merge(this_INTEGER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getNumberAccess().getFLOATTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getINTEGERAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getINTEGERAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule ParameterType
ruleParameterType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='boolean' 
	{
        $current = grammarAccess.getParameterTypeAccess().getBooleanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getParameterTypeAccess().getBooleanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='string' 
	{
        $current = grammarAccess.getParameterTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getParameterTypeAccess().getStringEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='integer' 
	{
        $current = grammarAccess.getParameterTypeAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getParameterTypeAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='real' 
	{
        $current = grammarAccess.getParameterTypeAccess().getRealEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getParameterTypeAccess().getRealEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='date' 
	{
        $current = grammarAccess.getParameterTypeAccess().getDateEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getParameterTypeAccess().getDateEnumLiteralDeclaration_4()); 
    }
));



// Rule FunctionType
ruleFunctionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='size' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getSizeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFunctionTypeAccess().getSizeEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='abs' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getAbsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFunctionTypeAccess().getAbsEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='sin' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getSinEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFunctionTypeAccess().getSinEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='cos' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getCosEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFunctionTypeAccess().getCosEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='tan' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getTanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFunctionTypeAccess().getTanEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='asin' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getAsinEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFunctionTypeAccess().getAsinEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='acos' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getAcosEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFunctionTypeAccess().getAcosEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='atan' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getAtanEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFunctionTypeAccess().getAtanEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='exp' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getExpEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFunctionTypeAccess().getExpEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='log' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getLogEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFunctionTypeAccess().getLogEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='sum' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getSumEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getFunctionTypeAccess().getSumEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='product' 
	{
        $current = grammarAccess.getFunctionTypeAccess().getProductEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getFunctionTypeAccess().getProductEnumLiteralDeclaration_11()); 
    }
));



// Rule OperationType
ruleOperationType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getOperationTypeAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperationTypeAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getOperationTypeAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperationTypeAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getOperationTypeAccess().getMULTIPLYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperationTypeAccess().getMULTIPLYEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='/' 
	{
        $current = grammarAccess.getOperationTypeAccess().getDIVIDEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperationTypeAccess().getDIVIDEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='.' 
	{
        $current = grammarAccess.getOperationTypeAccess().getSCALAREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperationTypeAccess().getSCALAREnumLiteralDeclaration_4()); 
    }
));



// Rule LogicalConnector
ruleLogicalConnector returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='and' 
	{
        $current = grammarAccess.getLogicalConnectorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalConnectorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='or' 
	{
        $current = grammarAccess.getLogicalConnectorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicalConnectorAccess().getOREnumLiteralDeclaration_1()); 
    }
));



RULE_FLOAT : ('+'|'-')? (RULE_INT '.' RULE_INT?|'.' RULE_INT) (('e'|'E') ('+'|'-')? RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


