/*
* generated by Xtext
*/
package net.ivoa.pdl.pdls.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.ivoa.pdl.pdls.services.PdlsGrammarAccess;

public class PdlsParser extends AbstractContentAssistParser {
	
	@Inject
	private PdlsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.ivoa.pdl.pdls.ui.contentassist.antlr.internal.InternalPdlsParser createParser() {
		net.ivoa.pdl.pdls.ui.contentassist.antlr.internal.InternalPdlsParser result = new net.ivoa.pdl.pdls.ui.contentassist.antlr.internal.InternalPdlsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConditionalStatementAccess().getAlternatives(), "rule__ConditionalStatement__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getAtomicConstantExpressionAccess().getAlternatives(), "rule__AtomicConstantExpression__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getINTEGERAccess().getAlternatives_0(), "rule__INTEGER__Alternatives_0");
					put(grammarAccess.getParameterTypeAccess().getAlternatives(), "rule__ParameterType__Alternatives");
					put(grammarAccess.getFunctionTypeAccess().getAlternatives(), "rule__FunctionType__Alternatives");
					put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
					put(grammarAccess.getLogicalConnectorAccess().getAlternatives(), "rule__LogicalConnector__Alternatives");
					put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterGroupAccess().getGroup(), "rule__ParameterGroup__Group__0");
					put(grammarAccess.getParameterGroupAccess().getGroup_3(), "rule__ParameterGroup__Group_3__0");
					put(grammarAccess.getParameterGroupAccess().getGroup_3_3(), "rule__ParameterGroup__Group_3_3__0");
					put(grammarAccess.getParameterGroupAccess().getGroup_5(), "rule__ParameterGroup__Group_5__0");
					put(grammarAccess.getConstraintOnGroupAccess().getGroup(), "rule__ConstraintOnGroup__Group__0");
					put(grammarAccess.getConstraintOnGroupAccess().getGroup_1(), "rule__ConstraintOnGroup__Group_1__0");
					put(grammarAccess.getConditionalStatementAccess().getGroup_2(), "rule__ConditionalStatement__Group_2__0");
					put(grammarAccess.getWhenConditionalStatementAccess().getGroup(), "rule__WhenConditionalStatement__Group__0");
					put(grammarAccess.getIfThenConditionalStatementAccess().getGroup(), "rule__IfThenConditionalStatement__Group__0");
					put(grammarAccess.getConditionalClauseAccess().getGroup(), "rule__ConditionalClause__Group__0");
					put(grammarAccess.getConditionalClauseAccess().getGroup_1(), "rule__ConditionalClause__Group_1__0");
					put(grammarAccess.getTerminalClauseAccess().getGroup(), "rule__TerminalClause__Group__0");
					put(grammarAccess.getAlwaysConditionalStatementAccess().getGroup(), "rule__AlwaysConditionalStatement__Group__0");
					put(grammarAccess.getValueLargerThanAccess().getGroup(), "rule__ValueLargerThan__Group__0");
					put(grammarAccess.getValueSmallerThanAccess().getGroup(), "rule__ValueSmallerThan__Group__0");
					put(grammarAccess.getValueInRangeAccess().getGroup(), "rule__ValueInRange__Group__0");
					put(grammarAccess.getValueDifferentFromAccess().getGroup(), "rule__ValueDifferentFrom__Group__0");
					put(grammarAccess.getIsRealAccess().getGroup(), "rule__IsReal__Group__0");
					put(grammarAccess.getIsRationalAccess().getGroup(), "rule__IsRational__Group__0");
					put(grammarAccess.getIsIntegerAccess().getGroup(), "rule__IsInteger__Group__0");
					put(grammarAccess.getDefaultValueAccess().getGroup(), "rule__DefaultValue__Group__0");
					put(grammarAccess.getBelongsToSetAccess().getGroup(), "rule__BelongsToSet__Group__0");
					put(grammarAccess.getBelongsToSetAccess().getGroup_2(), "rule__BelongsToSet__Group_2__0");
					put(grammarAccess.getBelongsToSetAccess().getGroup_2_1(), "rule__BelongsToSet__Group_2_1__0");
					put(grammarAccess.getIsNullAccess().getGroup(), "rule__IsNull__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getAtomicParameterExpressionAccess().getGroup(), "rule__AtomicParameterExpression__Group__0");
					put(grammarAccess.getAtomicParameterExpressionAccess().getGroup_2(), "rule__AtomicParameterExpression__Group_2__0");
					put(grammarAccess.getAtomicConstantExpressionAccess().getGroup_0(), "rule__AtomicConstantExpression__Group_0__0");
					put(grammarAccess.getAtomicConstantExpressionAccess().getGroup_0_1(), "rule__AtomicConstantExpression__Group_0_1__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
					put(grammarAccess.getParenthesisContentAccess().getGroup(), "rule__ParenthesisContent__Group__0");
					put(grammarAccess.getParenthesisContentAccess().getGroup_3(), "rule__ParenthesisContent__Group_3__0");
					put(grammarAccess.getINTEGERAccess().getGroup(), "rule__INTEGER__Group__0");
					put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
					put(grammarAccess.getServiceAccess().getParametersAssignment_5(), "rule__Service__ParametersAssignment_5");
					put(grammarAccess.getServiceAccess().getInputsAssignment_9(), "rule__Service__InputsAssignment_9");
					put(grammarAccess.getServiceAccess().getOutputsAssignment_13(), "rule__Service__OutputsAssignment_13");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
					put(grammarAccess.getParameterGroupAccess().getNameAssignment_1(), "rule__ParameterGroup__NameAssignment_1");
					put(grammarAccess.getParameterGroupAccess().getParamsAssignment_3_2(), "rule__ParameterGroup__ParamsAssignment_3_2");
					put(grammarAccess.getParameterGroupAccess().getParamsAssignment_3_3_1(), "rule__ParameterGroup__ParamsAssignment_3_3_1");
					put(grammarAccess.getParameterGroupAccess().getConstraintAssignment_4(), "rule__ParameterGroup__ConstraintAssignment_4");
					put(grammarAccess.getParameterGroupAccess().getActiveAssignment_5_1(), "rule__ParameterGroup__ActiveAssignment_5_1");
					put(grammarAccess.getParameterGroupAccess().getGroupsAssignment_6(), "rule__ParameterGroup__GroupsAssignment_6");
					put(grammarAccess.getConstraintOnGroupAccess().getStatementsAssignment_1_1(), "rule__ConstraintOnGroup__StatementsAssignment_1_1");
					put(grammarAccess.getConditionalStatementAccess().getCommentAssignment_2_1(), "rule__ConditionalStatement__CommentAssignment_2_1");
					put(grammarAccess.getWhenConditionalStatementAccess().getCriterionAssignment_1(), "rule__WhenConditionalStatement__CriterionAssignment_1");
					put(grammarAccess.getIfThenConditionalStatementAccess().getCriterionAssignment_1(), "rule__IfThenConditionalStatement__CriterionAssignment_1");
					put(grammarAccess.getIfThenConditionalStatementAccess().getClauseAssignment_3(), "rule__IfThenConditionalStatement__ClauseAssignment_3");
					put(grammarAccess.getConditionalClauseAccess().getConnAssignment_1_1(), "rule__ConditionalClause__ConnAssignment_1_1");
					put(grammarAccess.getConditionalClauseAccess().getRightAssignment_1_2(), "rule__ConditionalClause__RightAssignment_1_2");
					put(grammarAccess.getTerminalClauseAccess().getExprAssignment_0(), "rule__TerminalClause__ExprAssignment_0");
					put(grammarAccess.getTerminalClauseAccess().getCondAssignment_1(), "rule__TerminalClause__CondAssignment_1");
					put(grammarAccess.getAlwaysConditionalStatementAccess().getClauseAssignment_1(), "rule__AlwaysConditionalStatement__ClauseAssignment_1");
					put(grammarAccess.getValueLargerThanAccess().getValueAssignment_1(), "rule__ValueLargerThan__ValueAssignment_1");
					put(grammarAccess.getValueSmallerThanAccess().getValueAssignment_1(), "rule__ValueSmallerThan__ValueAssignment_1");
					put(grammarAccess.getValueInRangeAccess().getInfAssignment_3(), "rule__ValueInRange__InfAssignment_3");
					put(grammarAccess.getValueInRangeAccess().getSupAssignment_5(), "rule__ValueInRange__SupAssignment_5");
					put(grammarAccess.getValueDifferentFromAccess().getValueAssignment_1(), "rule__ValueDifferentFrom__ValueAssignment_1");
					put(grammarAccess.getIsRealAccess().getIsRealAssignment_0(), "rule__IsReal__IsRealAssignment_0");
					put(grammarAccess.getIsRationalAccess().getIsRationalAssignment_0(), "rule__IsRational__IsRationalAssignment_0");
					put(grammarAccess.getIsIntegerAccess().getIsIntegerAssignment_0(), "rule__IsInteger__IsIntegerAssignment_0");
					put(grammarAccess.getDefaultValueAccess().getValueAssignment_1(), "rule__DefaultValue__ValueAssignment_1");
					put(grammarAccess.getBelongsToSetAccess().getValuesAssignment_2_0(), "rule__BelongsToSet__ValuesAssignment_2_0");
					put(grammarAccess.getBelongsToSetAccess().getValuesAssignment_2_1_1(), "rule__BelongsToSet__ValuesAssignment_2_1_1");
					put(grammarAccess.getIsNullAccess().getIsNullAssignment_0(), "rule__IsNull__IsNullAssignment_0");
					put(grammarAccess.getFunctionAccess().getNameAssignment_0(), "rule__Function__NameAssignment_0");
					put(grammarAccess.getFunctionAccess().getExprAssignment_2(), "rule__Function__ExprAssignment_2");
					put(grammarAccess.getAtomicParameterExpressionAccess().getPrefAssignment_1(), "rule__AtomicParameterExpression__PrefAssignment_1");
					put(grammarAccess.getAtomicParameterExpressionAccess().getPowerAssignment_2_1(), "rule__AtomicParameterExpression__PowerAssignment_2_1");
					put(grammarAccess.getAtomicConstantExpressionAccess().getConstAssignment_0_0(), "rule__AtomicConstantExpression__ConstAssignment_0_0");
					put(grammarAccess.getAtomicConstantExpressionAccess().getPowerAssignment_0_1_1(), "rule__AtomicConstantExpression__PowerAssignment_0_1_1");
					put(grammarAccess.getAtomicConstantExpressionAccess().getStrAssignment_1(), "rule__AtomicConstantExpression__StrAssignment_1");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_0_1(), "rule__Expression__OpAssignment_1_0_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_0_2(), "rule__Expression__RightAssignment_1_0_2");
					put(grammarAccess.getParenthesisContentAccess().getExprAssignment_1(), "rule__ParenthesisContent__ExprAssignment_1");
					put(grammarAccess.getParenthesisContentAccess().getPowerAssignment_3_1(), "rule__ParenthesisContent__PowerAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.ivoa.pdl.pdls.ui.contentassist.antlr.internal.InternalPdlsParser typedParser = (net.ivoa.pdl.pdls.ui.contentassist.antlr.internal.InternalPdlsParser) parser;
			typedParser.entryRulePDL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PdlsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PdlsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
